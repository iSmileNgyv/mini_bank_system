// <auto-generated />
using System;
using CustomerService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace CustomerService.Infrastructure.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    partial class CustomerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerService.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNT_STATUS");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("BRANCH_CODE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("CUSTOMER_NUMBER");

                    b.Property<int>("CustomerType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMER_TYPE");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("DATE_OF_BIRTH");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<int>("KycStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("KYC_STATUS");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int?>("RelationshipManagerId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RELATIONSHIP_MANAGER_ID");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RISK_LEVEL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatus")
                        .HasDatabaseName("IX_CUSTOMERS_ACCOUNT_STATUS");

                    b.HasIndex("BranchCode")
                        .HasDatabaseName("IX_CUSTOMERS_BRANCH_CODE");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CUSTOMERS_CREATED_DATE");

                    b.HasIndex("CustomerNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CUSTOMERS_CUSTOMER_NUMBER");

                    b.HasIndex("KycStatus")
                        .HasDatabaseName("IX_CUSTOMERS_KYC_STATUS");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("CustomerService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("NUMBER(10)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR2(100)")
                                .HasColumnName("CITY");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR2(100)")
                                .HasColumnName("COUNTRY");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("NVARCHAR2(20)")
                                .HasColumnName("POSTAL_CODE");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR2(100)")
                                .HasColumnName("STATE");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("NVARCHAR2(500)")
                                .HasColumnName("STREET");

                            b1.HasKey("CustomerId");

                            b1.ToTable("CUSTOMERS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("CustomerService.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("NUMBER(10)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(320)
                                .HasColumnType("NVARCHAR2(320)")
                                .HasColumnName("EMAIL");

                            b1.HasKey("CustomerId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CUSTOMERS_EMAIL");

                            b1.ToTable("CUSTOMERS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("CustomerService.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("NUMBER(10)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("NVARCHAR2(20)")
                                .HasColumnName("PHONE_NUMBER");

                            b1.HasKey("CustomerId");

                            b1.ToTable("CUSTOMERS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("CustomerService.Domain.ValueObjects.ProfilePhoto", "ProfilePhoto", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("NUMBER(10)");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR2(100)")
                                .HasColumnName("PHOTO_CONTENT_TYPE");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("NVARCHAR2(255)")
                                .HasColumnName("PHOTO_FILE_NAME");

                            b1.Property<string>("FilePath")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("NVARCHAR2(1000)")
                                .HasColumnName("PHOTO_FILE_PATH");

                            b1.Property<long>("FileSize")
                                .HasColumnType("NUMBER(19)")
                                .HasColumnName("PHOTO_FILE_SIZE");

                            b1.Property<int>("Height")
                                .HasColumnType("NUMBER(10)")
                                .HasColumnName("PHOTO_HEIGHT");

                            b1.Property<string>("InternalUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("NVARCHAR2(500)")
                                .HasColumnName("PHOTO_INTERNAL_URL");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("TIMESTAMP(7)")
                                .HasColumnName("PHOTO_UPLOADED_AT");

                            b1.Property<int>("Width")
                                .HasColumnType("NUMBER(10)")
                                .HasColumnName("PHOTO_WIDTH");

                            b1.HasKey("CustomerId");

                            b1.ToTable("CUSTOMERS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("ProfilePhoto");
                });
#pragma warning restore 612, 618
        }
    }
}
